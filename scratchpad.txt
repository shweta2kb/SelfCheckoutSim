model.addAttribute("cart", cart);

if (action.equalsIgnoreCase("remove item")) {
			model.addAttribute("items", items);
			Item i = itemDao.findByName(request.getParameter("cartSelect"));
			cart.remove(i);
			String msg = i.getName() + " was succesfully removed from the cart!";
			model.addAttribute("msg", msg);
			model.addAttribute("cart", cart);
			return "newOrder";
		}

@RequestMapping(value="/checkout", method=RequestMethod.GET)
	public String checkout (Model model) {
		model.addAttribute("cart", cart);
		return "checkout";
	}
	
	@RequestMapping(value="/checkout", method=RequestMethod.POST)
	public String checkout (HttpServletRequest request, Model model) {
		model.addAttribute("cart", cart);
		String action = request.getParameter("action");
		Uscan u = new Uscan();
		msg = "Scan first item";
		Item cartItem = itemDao.findByName(request.getParameter("cart"));
		model.addAttribute("msg", msg);
		
		if(action.equalsIgnoreCase("scan item") && u.getAct_wt() == u.getExp_wt()) {
			u.setExp_wt(cartItem.getWt());
			Trans t = new Trans();
			t.addItem(cartItem);
			msg = "Place item in bagging area";
		}
		
		//need to check to see if cart select is empty
		else if(action.equalsIgnoreCase("scan item") && u.getAct_wt() != u.getExp_wt()) {
			msg = "Place previous item in bagging area";
		}
		
		else if (action.equalsIgnoreCase("bag item") && u.getAct_wt() != u.getExp_wt()) {
			u.setAct_wt(cartItem.getWt());
		}
		
		else if (action.equalsIgnoreCase("bag item") && u.getAct_wt() == u.getExp_wt()) {
			msg = "Scan previous item";
		}
		
		return "checkout";
	}